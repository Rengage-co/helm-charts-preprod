# Default values for rengage-ce.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This is to override the chart name.
nameOverride: ""
fullnameOverride: "rengage"
# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
nodeSelector: {}
tolerations: []
affinity: {}

nginx:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: nginx
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.16.0"
  env: []
    # - name: ENV1
    #   value: "Value1"
    # - name: ENV2
    #   value: "value2"
  # This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 80

  # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

# kube-prometheus-stack:
#   enabled: true
#   grafana:
#     adminUser: admin
#     adminPassword: password

aiagent:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

cache:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

comment:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

conductor:
  replicaCount: 3
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

conductorconsumer:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

conductorui:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

consumer:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

dataretention:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

feedmanager:
  replicaCount: 2
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

frontend:
  replicaCount: 1
  image:
    repository: public.ecr.aws/rengage/rengage-ce/react-demo
    pullPolicy: IfNotPresent
    tag: "20250618_prod"
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    className: "nginx"
    annotations: {}
    hosts:
      - host: demo.rengage.net
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

ingest:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

ingestwebhook:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

presentationlayer:
  replicaCount: 2
  image:
    repository: public.ecr.aws/rengage/rengage-ce/presentation-layer
    pullPolicy: IfNotPresent
    tag: "0c047efa"
  env:
    - name: CACHE_SERVICE_URL
      value: 'http://rengage-cache:8080/api/cache/clearColumn'
    - name: CONDUCTOR_CLICKHOUSE_APIENDPOINT
      value: 'http://rengage-cache:8080/api/cache/get'
    - name: CONDUCTOR_CLICKHOUSE_AUTHORIZATION
      value: Basic TO_BE_ADDED
    - name: DATABASE_PASSWORD
      value: password
    - name: DATABASE_URL
      value: 'jdbc:mysql://mysql:3306/presentationlayer?useSSL=false'
    - name: DATABASE_USERNAME
      value: root
    - name: REDIS_HOST
      value: redis-master
    - name: REDIS_PORT
      value: '6379'
    - name: REDIS_SSL
      value: 'true'
    - name: SPRING_CACHE_TYPE
      value: simple
    - name: SPRING_DATA_REDIS_HOST
      value: redis-master
    - name: SPRING_DATA_REDIS_PORT
      value: '6379'
    - name: SPRING_DATA_REDIS_SSL
      value: 'true'
    - name: awsEventBridge.lambdaArnSuffix
      value: prod
    - name: bulkJobManager.type
      value: eventBridgeLambda
    - name: confluent.password
      value: TO_BE_ADDED
    - name: confluent.username
      value: TO_BE_ADDED
    - name: spring.kafka.bootstrap-servers
      value: 'kafka:9092'
    - name: spring.kafka.isConfluent
      value: 'true'
    - name: AGENT_API_URL
      value: 'http://agent-service:3000/api/agent/run'
    - name: AWSEVENTBRIDGE_LAMBDAARNSUFFIX
      value: prod
    - name: CONDUCTOR_SERVERURL
      value: 'http://conductor-server:8080/api/'
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /google-app-credential/service_account.json
    - name: timestream.database
      value: rengage-prod
    - name: spring.data.redis.host
      value: redis-master
    - name: spring.data.redis.port
      value: '6379'
    - name: spring.data.redis.ssl
      value: 'true'
    - name: CLICKHOUSE_JDBCURL
      value: 'jdbc:clickhouse://clickhouse:8123?compress=0&ssl=false'
    - name: CLICKHOUSE_USERNAME
      value: default
    - name: CLICKHOUSE_PASSWORD
      value: password
    - name: spring.kafka.isConfluent
      value: 'true'
    - name: service.email.sendGridApiKey
      value: >-
        SG.TO_BE_ADDED
    - name: MILVUS_COLLECTION_NAME
      value: rengage_uj_template_prod
    - name: MILVUS_HOST
      value: milvus.blocfree.com
    - name: MILVUS_PORT
      value: '19530'
    - name: MILVUS_USERNAME
      value: root
    - name: MILVUS_PASSWORD
      value: Milvus
    - name: sendGridApiKey
      value: >-
        SG.TO_BE_ADDED
    - name: senderEmail
      value: admin@rengage.co
    - name: RENGAGE_TEMPLATE_URL
      value: 'http://rengage-template:8082/api/template'
    - name: RENGAGE_COMMENT_URL
      value: 'http://rengage-comment:8083/api/comment'
    - name: INGEST_API_URL
      value: 'http://rengage-ingest:80/api/v1'
    - name: CACHE_SERVICE_URL
      value: 'http://rengage-cache:8080/api'
    - name: GPT_API_KEY
      value: >-
        sk-TO_BE_ADDED
    - name: JAVA_OPTS
      value: >-
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Dcom.sun.management.jmxremote.local.only=false
        -Dcom.sun.management.jmxremote.port=9010
        -Dcom.sun.management.jmxremote.rmi.port=9010
        -Djava.rmi.server.hostname=127.0.0.1 -Xmx4g
        -XX:+ExplicitGCInvokesConcurrent
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes:
    - configMap:
        defaultMode: 420
        name: pl-google-app-credential
      name: google-app-credential
  volumeMounts:
    - mountPath: /google-app-credential
      name: google-app-credential

template:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

userconsumer:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""
  env: []
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  resources: {}
  livenessProbe: {}
  readinessProbe: {}
  autoscaling:
    enabled: false
  volumes: []
  volumeMounts: []

